# -*- coding: utf-8 -*-
"""voice_interface_multilang.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rGb-BEQalcVFB9cAqNhnhiUD_3O9suvj
"""

!pip install gTTS playsound

from google.colab import files
uploaded = files.upload()  # Upload all 4 JSON files together

def get_voice_input():
    return input("ЁЯЧг Type your voice query (simulate voice input): ")

from gtts import gTTS
import os
import IPython.display as ipd

def speak_text(text, lang='hi'):
    tts = gTTS(text=text, lang=lang)
    tts.save("response.mp3")
    return ipd.Audio("response.mp3")

import json

datasets = {}

def load_datasets():
    files = {
        'hi': 'legal_qa_dataset_hi.json',
        'bn': 'legal_qa_dataset_bn.json',
        'mr': 'legal_qa_dataset_mr.json',
        'ta': 'legal_qa_dataset_ta.json'
    }

    for lang, file_name in files.items():
        with open(file_name, 'r', encoding='utf-8') as f:
            datasets[lang] = json.load(f)

load_datasets()

def find_answer(query, lang_code):
    for pair in datasets[lang_code]:
        if pair['question'] in query:
            return pair['answer']
    return {
        'hi': "рдорд╛рдл рдХреАрдЬрд┐рдП, рдореБрдЭреЗ рдЗрд╕рдХрд╛ рдЙрддреНрддрд░ рдирд╣реАрдВ рдорд┐рд▓рд╛ред",
        'bn': "ржжрзБржГржЦрж┐ржд, ржЖржорж┐ ржПрж░ ржЙрждрзНрждрж░ ржЦрзБржБржЬрзЗ ржкрж╛ржЗржирж┐ред",
        'mr': "рдорд╛рдл рдХрд░рд╛, рдорд▓рд╛ рдпрд╛рдЪреЗ рдЙрддреНрддрд░ рд╕рд╛рдкрдбрд▓реЗ рдирд╛рд╣реА.",
        'ta': "рооройрпНройро┐роХрпНроХро╡рпБроорпН, роЗродро▒рпНроХро╛рой рокродро┐ро▓рпИ роиро╛ройрпН роХрогрпНроЯрпБрокро┐роЯро┐роХрпНроХ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ."
    }.get(lang_code, "Sorry, answer not found.")

def run_voice_interface():
    lang_map = {
        '1': ('hi', 'рд╣рд┐рдВрджреА'),
        '2': ('bn', 'ржмрж╛ржВрж▓рж╛'),
        '3': ('mr', 'рдорд░рд╛рдареА'),
        '4': ('ta', 'родрооро┐ро┤рпН')
    }

    print("ЁЯФд Select Language:")
    print("1 - Hindi\n2 - Bengali\n3 - Marathi\n4 - Tamil")
    choice = input("Enter 1/2/3/4: ").strip()

    if choice not in lang_map:
        print("тЭМ Invalid choice.")
        return

    lang_code, lang_name = lang_map[choice]
    print(f"тЬЕ You selected: {lang_name}")

    while True:
        query = get_voice_input()
        if query.lower() in ['exit', 'quit', 'рдмрдВрдж', 'ржерж╛ржорзЛ', 'рдмрдВрдж рдХрд░рд╛', 'роиро┐ро▒рпБродрпНродрпБ']:
            print("ЁЯФЪ Exiting...")
            break

        answer = find_answer(query, lang_code)
        print("ЁЯдЦ Answer:", answer)
        audio = speak_text(answer, lang=lang_code)
        display(audio)

run_voice_interface()